version: '3.11'

services:
  proxy:
    image: caddy:2-alpine
    restart: always
    cap_add: [ NET_ADMIN ]
    ports: [ 80:80, 443:443 ]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    env_file: [ .env ]

  postgres:
    container_name: postgres_hack
    image: postgres:latest
    restart: unless-stopped
    env_file:
      - backend/src/db.env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 3s
      retries: 2
    volumes:
      - ./db-data:/var/lib/postgresql/dataS
    expose: [ 5432 ]
  redis:
    container_name: redis_hack
    image: redis:latest
    restart: unless-stopped
    env_file:
      - backend/src/redis.env
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 2
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    expose: [ 6379 ]

  frontend:
    build: ./frontend
    expose: [ 3000 ]
    restart: unless-stopped
  backend:
    restart: unless-stopped
    env_file:
      - backend/src/app.env
    volumes:
      - ./backend/src/logs:/backend/src/logs
    depends_on:
      - postgres
      - redis
    expose: [ 8000 ]
    build:
      context: backend/src
      dockerfile: Dockerfile

volumes:
  caddy_data:
  caddy_config:
